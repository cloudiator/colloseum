# This is the main configuration file for the application.
# ~~~~~
# The application languages
# ~~~~~
application.langs = "en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `conf/my.application.Router`,
# you may need to define a router file `my.application.routes`.
# Default to Routes in the root package (and `conf/routes`)
# application.router=my.application.Routes

# Hibernate configuration
# ~~~~
jpa.default = defaultPersistenceUnit
db.default.jndiName = DefaultDS

play.db.prototype.hikaricp.connectionTimeout = 60 s
play.db.prototype.hikaricp.maximumPoolSize = 50

# Modules
play.modules.enabled += "InitModule"
play.modules.enabled += "models.service.JPAModule"
play.modules.enabled += "models.service.DatabaseServiceModule"
play.modules.enabled += "dtos.conversion.ConverterModule"
play.modules.enabled += "cloud.config.CloudModule"
play.modules.enabled += "cloud.sync.config.SolutionModule"
play.modules.enabled += "components.job.config.JobModule"
play.modules.enabled += "components.execution.ExecutionModule"
play.modules.enabled += "components.scalability.ScalingEngineModule"
play.modules.enabled += "components.scalability.AggregationModule"
play.modules.enabled += "components.log.LogCollectorModule"
play.modules.enabled += "components.model.config.ModelValidationModule"
play.modules.enabled += "components.auth.config.DatabaseTokenStoreModule"

# Colosseum node group
# All virtual machines user by colosseum will be prefixed with
# this String, allowing colosseum to identify machines managed
# by it.
# Please note: changing this during runtime, will cause
# serious problems :)
colosseum.nodegroup = "colosseum"

# ExecutionService Thread
# defaults to 10
colosseum.execution.thread = 20

# Loads the converters used for converting the data transfer objects (dto) to model objects.
colosseum.conversion.package = "dtos.conversion"
colosseum.conversion.converters = "dtos.conversion.converters"

# API token validity in milliseconds.
colosseum.auth.token.validity = 30000

# Enables model validation
colosseum.model.validation = true

## Sync ##

# Enables the virtual machine not in database detector. May lead to deletion of virtual machines!
# For debugging purposes, this should be disabled.
colosseum.sync.virtualMachineNotInDatabase.detector = false

# Enables detection of virtual machines that are in error state.
colosseum.sync.virtualMachineError.detector = false

# Enables detection of instance that are in error state.
colosseum.sync.instanceError.detector = false

# Directly deletes failed instances. Needs to be enabled if instances should be restarted as
# otherwise port conflicts are likely.
colosseum.deleteFailedInstances = false

# Will detect if a virtual machine is not bound to any instance. If yes, this virtual
# machine will be deleted.
colosseum.sync.virtualMachineIsEmpty.detector = false

# RMI
colosseum.rmi.timeout = 180000

## Installers ##

# Number of parallel downloads on the remote machine
# Multiple threads (multiple commands via one ssh connection) may cause problems on some operating systems (e.g. CENTOS)
colosseum.installer.download.threads = 1

# Java download path
colosseum.installer.linux.java.download = "http://javadl.sun.com/webapps/download/AutoDL?BundleId=106240"
colosseum.installer.windows.java.download = "http://javadl.sun.com/webapps/download/AutoDL?BundleId=107100"

# 7ZIP download path, used for extracting binary zip distribution on windows.
colosseum.installer.windows.7zip.download = "http://7-zip.org/a/7za920.zip"

# KairosDB download path
colosseum.installer.abstract.kairosdb.download = "https://github.com/kairosdb/kairosdb/releases/download/v0.9.4/kairosdb-0.9.4-6.tar.gz"
# KairosDB installation flag. If set to false, KairosDB will not be installed
colosseum.installer.linux.kairosdb.install.flag = true
colosseum.installer.windows.kairosdb.install.flag = true

# Visor download path
colosseum.installer.abstract.visor.download = "https://omi-dev.e-technik.uni-ulm.de/jenkins/job/cloudiator-visor/lastSuccessfulBuild/artifact/visor-service/target/visor.jar"
# Visor configuration options
colosseum.installer.abstract.visor.config.executionThreads = "20"
colosseum.installer.abstract.visor.config.reportingInterval = "10"
colosseum.installer.abstract.visor.config.telnetPort = "9001"
colosseum.installer.abstract.visor.config.restHost = "http://0.0.0.0"
colosseum.installer.abstract.visor.config.restPort = "31415"
colosseum.installer.abstract.visor.config.kairosServer = "localhost"
colosseum.installer.abstract.visor.config.kairosPort = "8080"
colosseum.installer.abstract.visor.config.reportingModule = "de.uniulm.omi.cloudiator.visor.reporting.kairos.KairosReportingModule"
colosseum.installer.abstract.visor.config.chukwaUrl = "http://localhost:8080/chukwa"

# Lance download path
colosseum.installer.abstract.lance.download = "https://omi-dev.e-technik.uni-ulm.de/jenkins/job/cloudiator-lance/lastSuccessfulBuild/artifact/server/target/lance-server-jar-with-dependencies.jar"
# Lance configuration options
colosseum.installer.abstract.lance.rmiPort = "1099"
colosseum.installer.abstract.lance.serverPort = "33033"
colosseum.installer.linux.lance.docker.install.flag = true
# hotfix for lance being not compatible with the latest docker version
colosseum.installer.linux.lance.docker_retry.download = "https://raw.githubusercontent.com/cloudiator/lance/master/install/docker_retry_fix_version.sh"
# colosseum.installer.linux.lance.docker_retry.download = "https://raw.githubusercontent.com/cloudiator/lance/master/install/docker_retry.sh"
colosseum.installer.linux.lance.docker.mtu.download = "https://raw.githubusercontent.com/cloudiator/colosseum/master/resources/fix_mtu.sh"

# Axe
# address of the TSDB to report to
colosseum.scalability.tsdb.host.default = "127.0.0.1"
# config of Visor that is used by axe to access:
colosseum.scalability.visor.port = 31415
colosseum.scalability.visor.telnet.port = 9001
colosseum.scalability.visor.mca.telnet.port = 27182
# rmi configuration that is also used by axe
colosseum.scalability.aggregator.rmi.host = "127.0.0.1"
colosseum.scalability.aggregator.rmi.key = "Aggregator"
colosseum.scalability.aggregator.rmi.port = 33039
# colosseum details that are used from axe to access colosseum
colosseum.scalability.aggregator.agent.local.protocol = "http"
colosseum.scalability.aggregator.agent.local.ip = "localhost"
colosseum.scalability.aggregator.agent.local.port = 9000
colosseum.scalability.aggregator.agent.local.username = "john.doe@example.com"
colosseum.scalability.aggregator.agent.local.tenant = "admin"
colosseum.scalability.aggregator.agent.local.password = "admin"
# colosseum details that are used from scaling actions remotely to access colosseum
colosseum.scalability.aggregator.scalingaction.protocol = "http"
colosseum.scalability.aggregator.scalingaction.ip = "localhost"
colosseum.scalability.aggregator.scalingaction.port = 9000
colosseum.scalability.aggregator.scalingaction.username = "john.doe@example.com"
colosseum.scalability.aggregator.scalingaction.tenant = "admin"
colosseum.scalability.aggregator.scalingaction.password = "admin"

# Log Collection
colosseum.log.colosseumLogPath = "logs/application.log"
colosseum.log.lanceFileName = "lance.out"
